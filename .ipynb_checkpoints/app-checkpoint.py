{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6d5f5a34-8b59-4467-a6ad-73bc289f3dd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "from flask import Flask, jsonify\n",
    "import numpy as np\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3b3ccdf4-37c0-4866-b48f-e972426dd40b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create engine to hawaii.sqlite\n",
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6ca41275-0808-4cba-ad72-4a53a3af8f52",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reflect an existing database into a new model\n",
    "Base = automap_base()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "afe9fed3-4cbd-43a0-b073-909f459f54ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reflect the tables\n",
    "Base.prepare(autoload_with=engine)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9ee43d47-307f-4175-860f-8bf3f9aa28b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save reference to the table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5b333ae-5d5c-47f8-a6a4-db62cb9e8fe8",
   "metadata": {},
   "outputs": [],
   "source": [
    "app = Flask(__name__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2781dab0-4698-41a3-8781-84b9fabc431e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a function which calculates and returns the the date one year from the most recent date\n",
    "def date_prev_year():\n",
    "    # Create the session\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Define the most recent date in the Measurement dataset\n",
    "    # Then use the most recent date to calculate the date one year from the last date\n",
    "    most_recent_date = session.query(func.max(Measurement.date)).first()\n",
    "    one_year = dt.date(2017, 8, 23) - dt.timedelta(days=365)\n",
    "\n",
    "    # Close the session                   \n",
    "    session.close()\n",
    "\n",
    "    # Return the date\n",
    "    return(first_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30d6325a-a734-441f-8088-5e486a58d9db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define what to do when the user hits the homepage\n",
    "@app.route(\"/\")\n",
    "def homepage():\n",
    "    return \"\"\" <h1> Homepage </h1>\n",
    "    <h3> The available routes are: </h3>\n",
    "    <ul>\n",
    "    <br><a href = \"/api/v1.0/precipitation\"> Precipitation</a>: /api/v1.0/precipitation\n",
    "    <br><a href = \"/api/v1.0/stations\"> Stations </a>: /api/v1.0/stations\n",
    "    <br><a href = \"/api/v1.0/tobs\"> TOBS </a>: /api/v1.0/tobs\n",
    "    <br>To retrieve the minimum, average, and maximum temperatures for a specific start date, use /api/v1.0/&ltstart&gt (replace start date in yyyy-mm-dd format)\n",
    "    <br>To retrieve the minimum, average, and maximum temperatures for a specific start-end range, use /api/v1.0/&ltstart&gt/&ltend&gt (replace start and end date in yyyy-mm-dd format)\n",
    "    \"\"\"\n",
    "\n",
    "# Define what to do when the user hits the precipitation URL\n",
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def precipitation():\n",
    "    # Create the session\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Query precipitation data from last 12 months from the most recent date from Measurement table\n",
    "    prcp_data = session.query(Measurement.date, Measurement.prcp).filter(Measurement.date >= date_prev_year()).all()\n",
    "    \n",
    "    # Close the session                   \n",
    "    session.close()\n",
    "\n",
    "    # Create a dictionary from the row data and append to a list of prcp_list\n",
    "    prcp_list = []\n",
    "    for date, prcp in prcp_data:\n",
    "        prcp_dict = {}\n",
    "        prcp_dict[\"date\"] = date\n",
    "        prcp_dict[\"prcp\"] = prcp\n",
    "        prcp_list.append(prcp_dict)\n",
    "\n",
    "    # Return a list of jsonified precipitation data for the previous 12 months \n",
    "    return jsonify(prcp_list)\n",
    "\n",
    "# Define what to do when the user hits the station URL\n",
    "@app.route(\"/api/v1.0/stations\")\n",
    "def stations():\n",
    "    # Create the session\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Query station data from the Station dataset\n",
    "    station_data = session.query(Station.station).all()\n",
    "\n",
    "    # Close the session                   \n",
    "    session.close()\n",
    "\n",
    "    # Convert list of tuples into normal list\n",
    "    station_list = list(np.ravel(station_data))\n",
    "\n",
    "    # Return a list of jsonified station data\n",
    "    return jsonify(station_list)\n",
    "\n",
    "# Define what to do when the user hits the URL\n",
    "@app.route(\"/api/v1.0/tobs\")\n",
    "def tobs():\n",
    "    # Create our session\n",
    "    session = Session(engine)\n",
    "\n",
    "    # Query tobs data from last 12 months from the most recent date from Measurement table\n",
    "    tobs_data = session.query(Measurement.date, Measurement.tobs).filter(Measurement.station == 'USC00519281').\\\n",
    "                        filter(Measurement.date >= date_prev_year()).all()\n",
    "\n",
    "    # Close the session                   \n",
    "    session.close()\n",
    "\n",
    "    # Create a dictionary from the row data and append to a list of tobs_list\n",
    "    tobs_list = []\n",
    "    for date, tobs in tobs_data:\n",
    "        tobs_dict = {}\n",
    "        tobs_dict[\"date\"] = date\n",
    "        tobs_dict[\"tobs\"] = tobs\n",
    "        tobs_list.append(tobs_dict)\n",
    "\n",
    "    # Return a list of jsonified tobs data for the previous 12 months\n",
    "    return jsonify(tobs_list)\n",
    "\n",
    "# Define what to do when the user hits the URL with a specific start date or start-end range\n",
    "@app.route(\"/api/v1.0/<start>\")\n",
    "@app.route(\"/api/v1.0/<start>/<end>\")\n",
    "def cal_temp(start=None, end=None):\n",
    "    # Create the session\n",
    "    session = Session(engine)\n",
    "    \n",
    "    # Make a list to query (the minimum, average and maximum temperature)\n",
    "    sel=[func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "    \n",
    "    # Check if there is an end date then do the task accordingly\n",
    "    if end == None: \n",
    "        # Query the data from start date to the most recent date\n",
    "        start_data = session.query(*sel).\\\n",
    "                            filter(Measurement.date >= start).all()\n",
    "        # Convert list of tuples into normal list\n",
    "        start_list = list(np.ravel(start_data))\n",
    "\n",
    "        # Return a list of jsonified minimum, average and maximum temperatures for a specific start date\n",
    "        return jsonify(start_list)\n",
    "    else:\n",
    "        # Query the data from start date to the end date\n",
    "        start_end_data = session.query(*sel).\\\n",
    "                            filter(Measurement.date >= start).\\\n",
    "                            filter(Measurement.date <= end).all()\n",
    "        # Convert list of tuples into normal list\n",
    "        start_end_list = list(np.ravel(start_end_data))\n",
    "\n",
    "        # Return a list of jsonified minimum, average and maximum temperatures for a specific start-end date range\n",
    "        return jsonify(start_end_list)\n",
    "\n",
    "    # Close the session                   \n",
    "    session.close()\n",
    "    \n",
    "# Define main branch \n",
    "if __name__ == \"__main__\":\n",
    "    app.run(debug = True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
